// <auto-generated />
using System;
using EdsanBooking.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EdsanBooking.Migrations
{
    [DbContext(typeof(BookingContext))]
    partial class BookingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EdsanBooking.Models.CheckIn", b =>
                {
                    b.Property<string>("CheckInId")
                        .HasColumnType("text")
                        .HasColumnName("checkinid");

                    b.Property<DateTime>("CheckInDt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("checkindt");

                    b.Property<TimeSpan>("CheckInTime")
                        .HasColumnType("interval")
                        .HasColumnName("checkintime");

                    b.Property<string>("CheckInType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("checkintype");

                    b.Property<DateTime>("CheckOutDt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("checkoutdt");

                    b.Property<TimeSpan>("CheckOutTime")
                        .HasColumnType("interval")
                        .HasColumnName("checkouttime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddt");

                    b.Property<string>("GuestId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guestid");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("loc");

                    b.Property<int>("NumGuest")
                        .HasColumnType("integer")
                        .HasColumnName("numguest");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("remarks");

                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reservationid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("CheckInId");

                    b.ToTable("checkin");
                });

            modelBuilder.Entity("EdsanBooking.Models.Comreserved", b =>
                {
                    b.Property<string>("ComResId")
                        .HasColumnType("text")
                        .HasColumnName("comresid");

                    b.Property<string>("GuestId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guestid");

                    b.Property<string>("Preference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("preference");

                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reservationid");

                    b.HasKey("ComResId");

                    b.ToTable("comreserved");
                });

            modelBuilder.Entity("EdsanBooking.Models.Guest", b =>
                {
                    b.Property<string>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("guestid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("address");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("contactno");

                    b.Property<string>("GName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gname");

                    b.Property<string>("GuestType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guesttype");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lname");

                    b.HasKey("GuestId");

                    b.ToTable("guest");
                });

            modelBuilder.Entity("EdsanBooking.Models.PaymentHistory", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("text")
                        .HasColumnName("transactionid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("CheckInId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("checkinid");

                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reservationid");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("transactiondate");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transactiontype");

                    b.HasKey("TransactionId");

                    b.ToTable("paymenthistory");
                });

            modelBuilder.Entity("EdsanBooking.Models.Reservation", b =>
                {
                    b.Property<string>("ReservationId")
                        .HasColumnType("text")
                        .HasColumnName("reservationid");

                    b.Property<DateTime>("CheckInDt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("checkindt");

                    b.Property<TimeSpan>("CheckInTime")
                        .HasColumnType("interval")
                        .HasColumnName("checkintime");

                    b.Property<DateTime>("CheckOutDt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("checkoutdt");

                    b.Property<TimeSpan>("CheckOutTime")
                        .HasColumnType("interval")
                        .HasColumnName("checkouttime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddt");

                    b.Property<string>("GuestId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guestid");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("loc");

                    b.Property<int>("NumGuest")
                        .HasColumnType("integer")
                        .HasColumnName("numguest");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("remarks");

                    b.Property<string>("ReservationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reservationtype");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("ReservationId");

                    b.ToTable("reservation");
                });

            modelBuilder.Entity("EdsanBooking.Models.ResortPKG", b =>
                {
                    b.Property<string>("PackageId")
                        .HasColumnType("text")
                        .HasColumnName("packageid");

                    b.Property<string>("Descr")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descr");

                    b.Property<int>("HourType")
                        .HasColumnType("integer")
                        .HasColumnName("hourtype");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("loc");

                    b.Property<int>("NumRoom")
                        .HasColumnType("integer")
                        .HasColumnName("numroom");

                    b.Property<decimal>("PackageAmt")
                        .HasColumnType("numeric")
                        .HasColumnName("packageamt");

                    b.HasKey("PackageId");

                    b.ToTable("resortpkg");
                });

            modelBuilder.Entity("EdsanBooking.Models.ResortRes", b =>
                {
                    b.Property<string>("ResortResId")
                        .HasColumnType("text")
                        .HasColumnName("resortresid");

                    b.Property<string>("CheckInId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("checkinid");

                    b.Property<string>("PkgName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pkgname");

                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reservationid");

                    b.HasKey("ResortResId");

                    b.ToTable("resortres");
                });

            modelBuilder.Entity("EdsanBooking.Models.Resortamenities", b =>
                {
                    b.Property<string>("AmenityId")
                        .HasColumnType("text")
                        .HasColumnName("amenityid");

                    b.Property<string>("Amenity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("amenity");

                    b.Property<string>("PkgName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pkgname");

                    b.HasKey("AmenityId");

                    b.ToTable("resortamenities");
                });

            modelBuilder.Entity("EdsanBooking.Models.Room", b =>
                {
                    b.Property<string>("RoomId")
                        .HasColumnType("text")
                        .HasColumnName("roomid");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("classification");

                    b.Property<string>("Descr")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descr");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("featurename");

                    b.Property<int>("HourType")
                        .HasColumnType("integer")
                        .HasColumnName("hourtype");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("loc");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("remarks");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("statusname");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("typename");

                    b.HasKey("RoomId");

                    b.ToTable("room");
                });

            modelBuilder.Entity("EdsanBooking.Models.RoomFeature", b =>
                {
                    b.Property<int>("RoomFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("roomfeatureid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoomFeatureId"));

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("featurename");

                    b.HasKey("RoomFeatureId");

                    b.ToTable("roomfeature");
                });

            modelBuilder.Entity("EdsanBooking.Models.RoomImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("featurename");

                    b.Property<string>("ImagePath1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("imagepath1");

                    b.Property<string>("ImagePath2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("imagepath2");

                    b.Property<string>("ImagePath3")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("imagepath3");

                    b.Property<string>("ImagePath4")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("imagepath4");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("typename");

                    b.HasKey("Id");

                    b.ToTable("roomimages");
                });

            modelBuilder.Entity("EdsanBooking.Models.RoomRates", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("classification");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("loc");

                    b.Property<decimal>("RoomRate")
                        .HasColumnType("numeric")
                        .HasColumnName("roomrate");

                    b.Property<string>("featureName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("featurename");

                    b.Property<int>("hourType")
                        .HasColumnType("integer")
                        .HasColumnName("hourtype");

                    b.Property<string>("typeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("typename");

                    b.HasKey("ID");

                    b.ToTable("roomrate");
                });

            modelBuilder.Entity("EdsanBooking.Models.RoomStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("statusid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("statusname");

                    b.HasKey("StatusId");

                    b.ToTable("status");
                });

            modelBuilder.Entity("EdsanBooking.Models.RoomType", b =>
                {
                    b.Property<int>("RoomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("roomtypeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoomTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("typename");

                    b.HasKey("RoomTypeId");

                    b.ToTable("roomtype");
                });

            modelBuilder.Entity("EdsanBooking.Models.Roomcheckin", b =>
                {
                    b.Property<string>("RoomCheckInId")
                        .HasColumnType("text")
                        .HasColumnName("roomcheckinid");

                    b.Property<string>("CheckInId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("checkinid");

                    b.Property<string>("GuestId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guestid");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("roomid");

                    b.HasKey("RoomCheckInId");

                    b.ToTable("roomcheckin");
                });

            modelBuilder.Entity("EdsanBooking.Models.SPRoomLoad", b =>
                {
                    b.Property<string>("RoomId")
                        .HasColumnType("text")
                        .HasColumnName("roomid");

                    b.Property<string>("Descr")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descr");

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer")
                        .HasColumnName("roomfeatureid");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("featurename");

                    b.Property<decimal>("HourType")
                        .HasColumnType("numeric")
                        .HasColumnName("hourtype");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("remarks");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("statusid");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("statusname");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("roomtypeid");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("typename");

                    b.HasKey("RoomId");

                    b.ToTable("SPRoomLoad");
                });

            modelBuilder.Entity("EdsanBooking.Models.TransientRes", b =>
                {
                    b.Property<string>("TrResId")
                        .HasColumnType("text")
                        .HasColumnName("trresid");

                    b.Property<string>("CheckInId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("checkinid");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("featurename");

                    b.Property<int>("HourType")
                        .HasColumnType("integer")
                        .HasColumnName("hourtype");

                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reservationid");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("typename");

                    b.HasKey("TrResId");

                    b.ToTable("transientres");
                });

            modelBuilder.Entity("EdsanBooking.Models.UserGuest", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.Property<string>("GuestId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guestid");

                    b.HasKey("UserId");

                    b.ToTable("userguest");
                });

            modelBuilder.Entity("EdsanBooking.Models.Users", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddt");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("failedloginattempts");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("islocked");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("loc");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("SecurityAnswer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("secanswer");

                    b.Property<string>("SecurityQuestion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("secquest");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userrole");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });
#pragma warning restore 612, 618
        }
    }
}
